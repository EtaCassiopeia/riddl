context Kitchen is {
  adaptor FromOrder for context Order is { ???  }
  type ReceiveOrder is {
    items: Restaurant.Menu.Item+
  }

  type OrderViewType is {
    address is IP4Address
  }
  device entity OrderViewer is {
   state OrderState is { field: OrderViewType }
   handler input is {}
  } explained as {
    |## Brief
    |This is an OrderViewer
    |## Details
    |The OrderViewer is the device in the kitchen, probably a touch screen,
    |that the cooks use to view the sequence of orders to cook.
    |# See
    |* "http://foo.com/"
  }

} explained as {
  |> The kitchen is where food is prepared"
  |The kitchen bounded context provides the ability for the kitchen staff
  |to interact with orders they are preparing. The kitchen is a client of
  |the orders bounded context and interacts with that context alone for
  |the outstanding orders to be prepared. Everything else that happens in
  |the kitchen is out of scope for the restaurant automation software.
  |Consequently, this bounded context is pretty minimal.
  |### Subject-Verb-Object Statements
  |1. Kitchen displays orders
  |1. Order is sent to Kitchen for display
  |1. Order sends order status changes to Kitchen
  |1. Kitchen ignores drink items on order
  |1.
}
