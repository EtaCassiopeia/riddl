domain ignore1 is {
  context ignore2 is {
    type Something = command { ??? }
    type UndoSomething = command { ??? }
    type AnotherThing = command { ??? }
    type UndoAnotherThing = command { ??? }
    entity blah is { ??? }
    saga name is {
      options(parallel)
      requires: { p1: String, p2: String }
      yields: {s: String }
      step One is {
        tell command Something() to entity blah
        reverted by
        tell command UndoSomething() to entity blah
      } as {
        example A is {
           then "Pass p1 to blah via Something command"
        }
      }
      step Two is {
        tell command AnotherThing() to entity blah
        reverted by
        tell command UndoAnotherThing() to entity blah
     } as {
        example B is {
          given "Step A has completed"
          then "Pass p2 to blah via AnotherThing command"
          and "Return AnotherThing's output"
        }
      }
    }
  } described as "ignore"
} described as "just for testing a saga"
