// #everything
// RIDDL is about defining domains so ...
domain Everything is {

  type SomeType is String
  type DoAThing is command { thingField: Integer }

  // Channels are defined to flow messages between entities. They are defined
  // in domain scope because they can cross contexts too.

  plant APlant is {
    processor Source is { outlet Commands is DoAThing } described by "Data Source"
    processor Sink is { inlet Commands is DoAThing } explained as "Data Sink"
    pipe AChannel is { transmit DoAThing } explained as "A Channel"
    joint input is outlet Source.Commands to pipe AChannel
    joint output is inlet Sink.Commands from pipe AChannel
  }

  // Domains are composed of bounded contexts so ...
  context full is {
    // Contexts can contain many kinds of definitions

    // 8 pre-defined types, shown as re-names
    type str is String             // Define str as a String
    type num is Number             // Define num as a Number
    type boo is Boolean            // Define boo as a Boolean
    type ident is UUID             // Define ident as an Id
    type dat is Date               // Define dat as a Date
    type tim is Time               // Define tim as a Time
    type stamp is TimeStamp        // Define stamp as a TimeStamp
    type url is URL

    // Enumerations have a value chosen from a list of identifiers
    type PeachType is { a: Integer }
    type enum is any of { Apple Pear Peach is type PeachType Persimmon }

    // Alternations select one type from a list of types
    type alt is one of { enum or stamp or url }

    // Aggregations combine several types and give each a field name identifier
    type agg is {
      key is num,
      id is ident,
      time is TimeStamp
    }

    // Types can have cardinality requirements similar to regular expressions
    type oneOrMore is many agg
    type zeroOrMore is agg*
    type optional is agg?

    // Commands, Events, Queries and Results are defined in terms of some
    // type, previously defined. Commands yield events. Queries yield results.



    // Entities are the main objects that contexts define. They can be
    // persistent (long lived) or aggregate (they consume commands and queries)
    entity Something is {
      options (aggregate persistent)

      type somethingDate is Date

      state someState is { field:  SomeType }

      function whenUnderTheInfluence is {
        requires Nothing
        yields Boolean
      }

      handler foo is {
        on command Something {
          when misc() explained as { "inebriated" } then {
            send event Inebriated to entity Everything.full.SomeOtherThing
          }
        }
      }
    }

    entity SomeOtherThing is {
      type ItHappened is event { field: String }
      state otherThingState is { field: String }
      handler fee is {
        on event ItHappened { set SomeOtherThing.otherThingState.field to ItHappened.field }
      }
    }
  }
}

// #everything
