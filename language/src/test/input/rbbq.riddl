// #everything
// #domains
domain ReactiveBBQ {
// #domains

  // Create some types with better names than just "Id"
  type CustomerId is Id() explained as {
    brief "Unique identifier for a customer"
  }

  type OrderId is Id() described as {
    brief "Unique identifier for a customer's order"
    see "http://www.example.com/show/details/on/OrderId"
  }

  topic Inputs {
    commands {
      foo is String yields event bar
    } events {
      bar is String
    } queries {} results {}
  }

  topic Outputs {  commands {} events {  } queries {} results {} }

  // #Kitchen
  // The Kitchen context pertains to
  context Kitchen {
    type IP4Address is { a: Number, b: Number, c: Number, d: Number}
    type OrderViewType is {
      address is IP4Address
    }
    device entity OrderViewer {
     state is { field: OrderViewType }
     consumer input of topic Inputs
    } explained as {
      brief "This is an OrderViewer"
      details {
        |The OrderViewer is the device in the kitchen, probably a touch screen,
        |that the cooks use to view the sequence of orders to cook
     }
    }
  } explained as {
    brief "The kitchen is where food is prepared"
    details {
      |The kitchen bounded context provides the ability for the kitchen staff
      |to interact with orders they are preparing. The kitchen is a client of
      |the orders bounded context and interacts with that context alone
      |the outstanding orders to be prepared. Everything else that happens in
      |the kitchen is out of scope for the restaurant automation software.
      |Consequently, this bounded context is pretty minimal.
      |### Subject-Verb-Object Statements
      |1. Kitchen displays orders
      |1. Order is sent to Kitchen for display
      |1. Order sends order status changes to Kitchen
      |1. Kitchen ignores drink items on order
      |1.
    } items { }
  }
  // #Kitchen

  // #Loyalty
  context Loyalty {
    type AccrualEvent is {
      when is TimeStamp,
      who is CustomerId,
      pointsAccrued is Number,
      fromOrder is OrderId
    }
    type AwardEvent is {
      when is TimeStamp,
      who is CustomerId,
      pointsAwarded is Number,
      toOrder is OrderId
    }
    type RewardEvent is one of { AccrualEvent or AwardEvent }
    entity RewardsAccount is {
      state is {
        id is CustomerId,
        points is Number,
        rewardEvents is many optional RewardEvent
      }
      consumer ofInputs of topic Inputs
    }
  }
  // #Loyalty

  // #Order
  context Order {
    entity Order {
      option is aggregate
      state is {
        orderId is OrderId,
        customerId is CustomerId
      }
      consumer foo of topic Inputs
    }
  }
  // #Order

  // #Payment
  context Payment {
    entity Payment {
      option is aggregate
      state is {
        orderId is Id(),
        amount is Number,
        cardToken is String
      }
      consumer foo of topic Inputs
    }
  }
  // #Payment

  // #Menu
  context Menu {
    entity MenuItem {
      state is {
        something: String
      }
      consumer foo of topic Inputs
    }
    type MenuItemRef is refer to entity MenuItem
    entity Menu is {
      option is aggregate
      state {
         items: many MenuItemRef
      }
      consumer foo of topic Inputs
    }
  }
  // #Menu

  // #Reservation
  context Reservation {
    type ReservationValue is {
      partyName is String,
      phoneNumber is String,
      location is Id(Location),
      time is Time,
      date is Date
    }
    entity Location is {
      state is { foo:  String }
      consumer foo of topic Inputs
    }
    described as {
      brief "This is a retail store Location"
    }

    entity Reservation {
     options ( aggregate )
     state { reservation: ReservationValue }
     consumer ofInputs of topic Inputs
    }
  }
  // #Reservation
} explained as {
  brief "Reactive BBQ Domain Definition"
  details {
    |This domain definition is designed to be instructive in the RIDDL language.
    |It uses the case study from the Lightbend Reactive Architecture course as
    |the basis for defining the domain. The course uses a set of interviews with
    |Reactive BBQ employees to define the requirements. This domain specification
    |is a possible result of analyzing that domain: the Reactive BBQ restaurant.
  }
}
// #everything
