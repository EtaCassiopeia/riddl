// #everything
// #domains
domain ReactiveBBQ {
// #domains

  // Create some types with better names than just "Id"
  type CustomerId is Id() explained as {
    |Unique identifier for a customer
  }
  type OrderId is Id() explained as {
    |Unique identifier for a customer's order
  } see also {
    |Reference to something about OrderIds
  }

  // #Kitchen
  // The Kitchen context pertains to
  context Kitchen {
    type IP4Address is { a: Number, b: Number, c: Number, d: Number}
    type OrderViewType is {
      address is IP4Address
    }
    topic Commands { commands {} events {} queries {} results {} }
    device entity OrderViewer as OrderViewType is {
      consumes topic Commands
    } explained as {
      |The OrderViewer is the device in the kitchen, probably a touch screen,
      |that the cooks use to view the sequence of orders to cook
    }
  } explained as {
    |The kitchen bounded context provides the ability for the kitchen staff
    |to interact with orders they are preparing. The kitchen is a client of
    |the orders bounded context and interacts with that context alone
    |the outstanding orders to be prepared. Everything else that happens in
    |the kitchen is out of scope for the restaurant automation software.
    |Consequently, this bounded context is pretty minimal.
    |### Subject-Verb-Object Statements
    |1. Kitchen displays orders
    |1. Order is sent to Kitchen for display
    |1. Order sends order status changes to Kitchen
    |1. Kitchen ignores drink items on order
    |1.
  }
  // #Kitchen

  // #Loyalty
  context Loyalty {
    type AccrualEvent is {
      when is TimeStamp,
      who is CustomerId,
      pointsAccrued is Number,
      fromOrder is OrderId
    }
    type AwardEvent is {
      when is TimeStamp,
      who is CustomerId,
      pointsAwarded is Number,
      toOrder is OrderId
    }
    type RewardEvent is ( AccrualEvent or AwardEvent )
    type RewardsAccountType is {
      id is CustomerId,
      points is Number,
      rewardEvents is many optional RewardEvent
    }
    topic Commands { commands {} events {} queries {} results {} }

    entity RewardsAccount as RewardsAccountType {
      consumes topic Commands
    }
  }
  // #Loyalty

  // #Order
  context Order {
    type OrderType is  {
      orderId is OrderId,
      customerId is CustomerId
    }
    topic Commands { commands {} events {} queries {} results {} }

    entity Order as OrderType is {
      option is aggregate
      consumes topic Commands
    }
  }
  // #Order

  // #Payment
  context Payment {
    type PaymentType is  {
      orderId is Id(),
      amount is Number,
      cardToken is String
    }
    topic Commands { commands {} events {} queries {} results {} }
    entity Payment as PaymentType is {
      option is aggregate
      consumes topic Commands
    }
  }
  // #Payment

  // #Menu
  context Menu {
    topic Commands { commands {} events {} queries {} results {} }
    entity MenuItem as String is {
      consumes topic Commands
    }
    type MenuItemRef is refer to entity MenuItem
    entity Menu as many MenuItemRef is {
      option is aggregate
      consumes topic Commands
    }
  }
  // #Menu

  // #Reservation
  context Reservation {
    type ReservationValue is {
      partyName is String,
      phoneNumber is String,
      location is Id(Location),
      time is Time,
      date is Date
    }
    entity Location as String is { consumes topic Commands }
    explained as {
      |foo
    }

  event bar is String
  command foo is String yields event bar

    topic Commands { commands { foo } events {} queries {} results {} }
    topic Events {  commands {} events {  } queries {} results {} }

    entity Reservation as ReservationValue is {
      options ( aggregate )
      consumes topic Commands
      produces topic Events
    }
  }
  // #Reservation
} explained as {
  |# Reactive BBQ Domain Definition
  |This domain definition is designed to be instructive in the RIDDL language.
  |It uses the case study from the Lightbend Reactive Architecture course as
  |the basis for defining the domain. The course uses a set of interviews with
  |Reactive BBQ employees to define the requirements. This domain specification
  |is a possible result of analyzing that domain: the Reactive BBQ restaurant.
}
// #everything
