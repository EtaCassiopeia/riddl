// #everything
// #domains
domain ReactiveBBQ {
// #domains

  // Create some types with better names than just "Id"
  type CustomerId is Id
  type OrderId is Id

  // #Kitchen
  // The Kitchen context pertains to
  context Kitchen {
    type OrderViewType is combine {
      address is IPAddress
    }
    entity OrderView is OrderViewType {
    }
  }
  // #Kitchen

  // #Loyalty
  context Loyalty {
    type AccrualEvent is combine {
      when is TimeStamp,
      who is CustomerId,
      pointsAccrued is Number,
      fromOrder is OrderId
    }
    type AwardEvent is combine {
      when is TimeStamp,
      who is CustomerId,
      pointsAwarded is Number,
      toOrder is OrderId
    }
    type RewardEvent is choose AccrualEvent or AwardEvent
    type RewardsAccountType is combine {
      id is CustomerId,
      points is Number,
      events is RewardEvent*
    }
    entity RewardsAccount is RewardsAccountType {
    }
  }
  // #Loyalty

  // #Order
  context Order {
    type OrderType is combine {
      orderId is Id,
      customerId is Id
    }
    entity Order is OrderType {
      options: aggregate
    }
  }
  // #Order

  // #Payment
  context Payment {
    type PaymentType is combine {
      orderId is Id,
      amount is Number,
      cardToken is String
    }
    entity Payment is PaymentType {
      options: aggregate
    }
  }
  // #Payment

  // #Menu
  context Menu {
    entity MenuItem is String {
    }
    entity Menu is MenuItem+ {
      options: aggregate
    }
  }
  // #Menu

  // #Reservation
  context Reservation {
    type ReservationType is combine {
      partyName is String,
      phoneNumber is String,
      location is Id,
      time is Time,
      date is Date
    }
    entity Reservation is ReservationType {
      consumes channel foo
      produces channel bar
    }
  }
  // #Reservation
}
// #everything
