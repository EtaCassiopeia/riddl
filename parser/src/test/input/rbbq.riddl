// #everything
// #domains
domain ReactiveBBQ {
// #domains

  // Create some types with better names than just "Id"
  type CustomerId = Id
  type OrderId = Id

  // #Kitchen
  // The Kitchen context pertains to
  context Kitchen {
    entity OrderView = combine {
      address: type IPAddress
    }
  }
  // #Kitchen

  // #Loyalty
  context Loyalty {
    type AccrualEvent = combine {
      when: TimeStamp,
      who: type CustomerId,
      pointsAccrued: Number,
      fromOrder: type OrderId
    }
    type AwardEvent = combine {
      when: TimeStamp,
      who: type CustomerId,
      pointsAwarded: Number,
      toOrder: type OrderId
    }
    type RewardEvent = choose AccrualEvent or AwardEvent
    entity RewardsAccount = combine {
      id: type CustomerId,
      points: Number,
      events: type RewardEvent*
    }
  }
  // #Loyalty

  // #Order
  context Order {
    aggregate entity Order = combine {
      orderId: Id,
      customerId: Id
    }
  }
  // #Order

  // #Payment
  context Payment {
    aggregate entity Payment = combine {
      orderId: Id,
      amount: Number,
      cardToken: String
    }
  }
  // #Payment

  // #Menu
  context Menu {
    entity MenuItem =  String
    aggregate entity Menu = type MenuItem+
  }
  // #Menu

  // #Reservation
  context Reservation {
    aggregate entity Reservation = combine {
      partyName: String,
      phoneNumber: String,
      location: Id,
      time: Time,
      date: Date
    } consumes channel 'foo' produces channel 'bar'
  }
  // #Reservation
}
// #everything
